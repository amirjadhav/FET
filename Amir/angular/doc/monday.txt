[Yesterday 10:08 AM] Dadaram Manohar Jadhav
    
import java.util.Properties;


import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.PasswordAuthentication;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.AddressException;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;



public class EmailUtil {​​​​​​​
    public  void sendEmail(String to, String msg) throws AddressException, MessagingException {​​​​​​​
        
 
        
         Properties props = new Properties();
         
         props.put("mail.smtp.host", "172.27.172.202");
         props.put("mail.from","dadaramj@evolvingsols.com");
         props.put("mail.smtp.ssl.trust", "172.27.172.202");
         props.put("mail.smtp.starttls.enable", "true");
         props.put("mail.smtp.auth", "true");
//        props.put("mail.smtp.port", "25");


        Session session = Session.getInstance(props,
                new javax.mail.Authenticator() {​​​​​​​
            protected PasswordAuthentication getPasswordAuthentication() {​​​​​​​
                return new PasswordAuthentication("dadaramj@evolvingsols.com", "Tiger@321");
            }​​​​​​​
        }​​​​​​​);


        Message message = new MimeMessage(session);
        message.setFrom(new InternetAddress("dadaramj@evolvingsols.com"));
        message.setRecipients(Message.RecipientType.TO,
                InternetAddress.parse(to));
        message.setSubject("Test email");
        message.setText(msg);
        Transport.send(message);
        System.out.println("Sent message successfully....");
    }​​​​​​​
}​​​​​​​
 






​[Yesterday 10:09 AM] Dadaram Manohar Jadhav
    
import javax.mail.MessagingException;
import javax.mail.internet.AddressException;


public class TestEmail {​​​​​​​
    public static void main(String[] args) throws AddressException, MessagingException {​​​​​​​
        EmailUtil eu = new EmailUtil();
        eu.sendEmail("dadaramj@cybage.com", "this is just test email...");
    }​​​​​​​
}​​​​​​​
 



​[Yesterday 10:10 AM] Dadaram Manohar Jadhav
    <dependency>
            <groupId>javax.mail</groupId>
            <artifactId>javax.mail-api</artifactId>
            <version>1.6.2</version>
        </dependency>
        <dependency>
            <groupId>com.sun.mail</groupId>
            <artifactId>javax.mail</artifactId>
            <version>1.6.0</version>
        </dependency>




[Yesterday 10:25 AM] Dadaram Manohar Jadhav
    
server.port=8082
 


spring.jpa.generate-ddl=false
spring.jpa.hibernate.ddl-auto=create-drop
spring.datasource.url=jdbc:mysql://localhost:3306/cybage?useSSL=false
spring.datasource.username=root
spring.datasource.password=admin123
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5Dialect
 



​[Yesterday 10:28 AM] Dadaram Manohar Jadhav
    
package com.cybage.controller;


import java.util.List;
import java.util.Optional;


import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.server.ResponseStatusException;


import com.cybage.model.Users;
import com.cybage.repository.UsersRepository;


@RestController 
@RequestMapping("/users")
@CrossOrigin
public class UserController {​​​​​​​
    
    @Autowired
    UsersRepository ur;


    
    @GetMapping
    public List<Users> getAllUsers(){​​​​​​​
        if(ur.findAll().size() == 5) {​​​​​​​
            throw new ResponseStatusException(HttpStatus.NOT_FOUND, "there are not users in database");
        }​​​​​​​
        return ur.findAll();
    }​​​​​​​
    
    @GetMapping("/{​​​​​​​id}​​​​​​​")
    public Optional<Users> getUserById(@PathVariable int id){​​​​​​​
        return ur.findById(id);
    }​​​​​​​


    @PostMapping
    public String addUser(@RequestBody Users user){​​​​​​​
        ur.save(user);        
        return "successfully added user...";
    }​​​​​​​
    
    @PutMapping
    public String updateUser(@RequestBody Users user){​​​​​​​
        ur.save(user);        
        return "successfully updated user...";
    }​​​​​​​
    
    @DeleteMapping("/{​​​​​​​id}​​​​​​​")
    public String deleteUser(@PathVariable int id){​​​​​​​
        ur.deleteById(id);        
        return "successfully deleted user...";
    }​​​​​​​
    
}​​​​​​​
 








​[Yesterday 10:30 AM] Dadaram Manohar Jadhav
    @Autowired
    UserRepository ur;
   
    @Override
    public void run(String... args) throws Exception {​​​​​​​
       
        //add two users in the beginning
        User user  = new User(1, "user", new BCryptPasswordEncoder().encode("user"), 1234, 35, null);
        List<String> roles = new ArrayList<String>();
        roles.add("USER");
        user.setRoles(roles);
        ur.save(user);
       
        user  = new User(2, "admin", new BCryptPasswordEncoder().encode("admin"), 1235, 36, null);
        roles = new ArrayList<String>();
        roles.add("ADMIN");
        user.setRoles(roles);
        ur.save(user);
       
       
        user  = new User(3, "dm", new BCryptPasswordEncoder().encode("dm"), 1235, 36, null);
        roles = new ArrayList<String>();
        roles.add("ADMIN");
        user.setRoles(roles);
        ur.save(user);
    }​​​​​​​
​[Yesterday 10:33 AM] Dadaram Manohar Jadhav
    
package com.cybage;


import java.util.ArrayList;
import java.util.List;


import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.CommandLineRunner;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;


import com.cybage.security.User;
import com.cybage.security.UserRepository;



@SpringBootApplication
public class BackendApplication implements CommandLineRunner{​​​​​​​


    public static void main(String[] args) {​​​​​​​
        SpringApplication.run(BackendApplication.class, args);
    }​​​​​​​
    



    @Autowired
    UserRepository ur;
    
    @Override
    public void run(String... args) throws Exception {​​​​​​​
        
        //add two users in the beginning
        User user  = new User(1, "user", new BCryptPasswordEncoder().encode("user"), 1234, 35, null);
        List<String> roles = new ArrayList<String>();
        roles.add("USER");
        user.setRoles(roles);
        ur.save(user);
        
        user  = new User(2, "admin", new BCryptPasswordEncoder().encode("admin"), 1235, 36, null);
        roles = new ArrayList<String>();
        roles.add("ADMIN");
        user.setRoles(roles);
        ur.save(user);
        
        
        user  = new User(3, "dm", new BCryptPasswordEncoder().encode("dm"), 1235, 36, null);
        roles = new ArrayList<String>();
        roles.add("ADMIN");
        user.setRoles(roles);
        ur.save(user);
    }​​​​​​​
    
}​​​​​​​
 


break 15 min

import { ReactiveFormsModule } from '@angular/forms';




[Yesterday 11:58 AM] Dadaram Manohar Jadhav
    

import {​​​​​​​​ Component, OnInit }​​​​​​​​ from'@angular/core';
import {​​​​​​​​ FormControl, FormGroup }​​​​​​​​ from'@angular/forms';
 
@Component({​​​​​​​​
  selector: 'app-login',
  templateUrl: './login.component.html',
  styleUrls: ['./login.component.scss']
}​​​​​​​​)
exportclass LoginComponent implements OnInit {​​​​​​​​
  loginForm: FormGroup
  ngOnInit() {​​​​​​​​
this.loginForm = new FormGroup({​​​​​​​​
      username: new FormControl('user'),
      password: new FormControl('user')
    }​​​​​​​​)
  }​​​​​​​​
constructor() {​​​​​​​​ }​​​​​​​​
  loginUser() {​​​​​​​​
    console.log(this.loginForm.value)
  }​​​​​​​​
}​​​​​​​​

​[Yesterday 12:02 PM] Dadaram Manohar Jadhav
    

import {​​​​​​​​ HttpClient }​​​​​​​​ from'@angular/common/http';
import {​​​​​​​​ Injectable }​​​​​​​​ from'@angular/core';
import {​​​​​​​​ environment }​​​​​​​​ from'src/environments/environment.prod';
 
@Injectable({​​​​​​​​
  providedIn: 'root'
}​​​​​​​​)
exportclass AuthenticationService {​​​​​​​​
 
constructor(private http: HttpClient) {​​​​​​​​ }​​​​​​​​
  authenticate(username, password) {​​​​​​​​
returnthis.http.post(environment.baseUserUrl + '/auth/authenticate',
      {​​​​​​​​ username, password }​​​​​​​​
    )
  }​​​​​​​​
}​​​​​​​​

​[Yesterday 12:05 PM] Dadaram Manohar Jadhav
    

import {​​​​​​​​ Component, OnInit }​​​​​​​​ from'@angular/core';
import {​​​​​​​​ FormControl, FormGroup }​​​​​​​​ from'@angular/forms';
import {​​​​​​​​ AuthenticationService }​​​​​​​​ from'../authentication.service';
 
@Component({​​​​​​​​
  selector: 'app-login',
  templateUrl: './login.component.html',
  styleUrls: ['./login.component.scss']
}​​​​​​​​)
exportclass LoginComponent implements OnInit {​​​​​​​​
  loginForm: FormGroup
  ngOnInit() {​​​​​​​​
this.loginForm = new FormGroup({​​​​​​​​
      username: new FormControl('user'),
      password: new FormControl('user')
    }​​​​​​​​)
  }​​​​​​​​
constructor(private as: AuthenticationService) {​​​​​​​​ }​​​​​​​​
  loginUser() {​​​​​​​​
this
      .as
      .authenticate(this.loginForm.value.username, this.loginForm.value.password)
      .subscribe(
        data => {​​​​​​​​
          console.log(data)
        }​​​​​​​​
      )
  }​​​​​​​​
}​​​​​​​​

​[Yesterday 12:46 PM] Dadaram Manohar Jadhav
    

import {​​​​​​​​ HttpClient }​​​​​​​​ from'@angular/common/http';
import {​​​​​​​​ Injectable }​​​​​​​​ from'@angular/core';
import {​​​​​​​​ BehaviorSubject }​​​​​​​​ from'rxjs';
import {​​​​​​​​ environment }​​​​​​​​ from'src/environments/environment.prod';
import {​​​​​​​​ map }​​​​​​​​ from'rxjs/operators'
import {​​​​​​​​ timeStamp }​​​​​​​​ from'console';
 
@Injectable({​​​​​​​​
  providedIn: 'root'
}​​​​​​​​)
exportclass AuthenticationService {​​​​​​​​
 
  loginStatus = new BehaviorSubject<boolean>(false);
  username = new BehaviorSubject<String>(sessionStorage.getItem('username'))
  userrole = new BehaviorSubject<String>(sessionStorage.getItem('userrole'))
constructor(private http: HttpClient) {​​​​​​​​ }​​​​​​​​
  authenticate(username, password) {​​​​​​​​
returnthis.http.post(environment.baseUserUrl + '/auth/authenticate',
      {​​​​​​​​ username, password }​​​​​​​​
    ).pipe(
      map((userdata: any) => {​​​​​​​​
        sessionStorage.setItem('username', userdata.username)
        sessionStorage.setItem('userrole', userdata.userrole)
        sessionStorage.setItem('token', 'Bearer ' + userdata.token)
 
this.loginStatus.next(true)
this.username.next(sessionStorage.getItem('username'))
this.userrole.next(sessionStorage.getItem('userrole'))
 
return userdata
      }​​​​​​​​)
    )
  }​​​​​​​​
 
  isLoggedIn() {​​​​​​​​
returnthis.loginStatus
  }​​​​​​​​
  logout() {​​​​​​​​
 
    sessionStorage.removeItem('username')
    sessionStorage.removeItem('userrole')
    sessionStorage.removeItem('token')
 
this.loginStatus.next(false)
this.username.next(null)
this.userrole.next(null)
  }​​​​​​​​
}​​​​​​​​

​[Yesterday 12:51 PM] Dadaram Manohar Jadhav
    

import {​​​​​​​​ Component }​​​​​​​​ from'@angular/core';
import {​​​​​​​​ AuthenticationService }​​​​​​​​ from'./authentication.service';
 
@Component({​​​​​​​​
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.scss']
}​​​​​​​​)
exportclass AppComponent {​​​​​​​​
  title = 'ui';
 
constructor(private as: AuthenticationService) {​​​​​​​​
 
  }​​​​​​​​
  logout() {​​​​​​​​
this.as.logout()
  }​​​​​​​​
}​​​​​​​​

​[Yesterday 12:53 PM] Dadaram Manohar Jadhav
    

import {​​​​​​​​ NgModule }​​​​​​​​ from'@angular/core';
import {​​​​​​​​ Routes, RouterModule }​​​​​​​​ from'@angular/router';
import {​​​​​​​​ AdminhomeComponent }​​​​​​​​ from'./admin/adminhome/adminhome.component';
import {​​​​​​​​ ErrorComponent }​​​​​​​​ from'./error/error.component';
import {​​​​​​​​ LandingComponent }​​​​​​​​ from'./landing/landing.component';
import {​​​​​​​​ LoginComponent }​​​​​​​​ from'./login/login.component';
import {​​​​​​​​ UserhomeComponent }​​​​​​​​ from'./user/userhome/userhome.component';
 
const routes: Routes = [
  {​​​​​​​​ path: '', component: LandingComponent }​​​​​​​​,
  {​​​​​​​​
    path: 'user', component: UserhomeComponent,
    data: {​​​​​​​​ role: 'ROLE_USER' }​​​​​​​​
  }​​​​​​​​,
  {​​​​​​​​
    path: 'admin', component: AdminhomeComponent,
    data: {​​​​​​​​ role: 'ROLE_ADMIN' }​​​​​​​​
  }​​​​​​​​,
  {​​​​​​​​ path: 'login', component: LoginComponent }​​​​​​​​,
  {​​​​​​​​ path: '**', component: ErrorComponent }​​​​​​​​
];
 
@NgModule({​​​​​​​​
  imports: [RouterModule.forRoot(routes)],
  exports: [RouterModule]
}​​​​​​​​)
exportclass AppRoutingModule {​​​​​​​​ }​​​​​​​​

​[Yesterday 1:00 PM] Dadaram Manohar Jadhav
    

import {​​​​​​​​ Injectable }​​​​​​​​ from'@angular/core';
import {​​​​​​​​ CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, UrlTree, Router }​​​​​​​​ from'@angular/router';
import {​​​​​​​​ Observable }​​​​​​​​ from'rxjs';
import {​​​​​​​​ AuthenticationService }​​​​​​​​ from'./authentication.service';
 
@Injectable({​​​​​​​​
  providedIn: 'root'
}​​​​​​​​)
exportclass AuthGuard implements CanActivate {​​​​​​​​
 
  userrole: String
constructor(private router: Router, private as: AuthenticationService) {​​​​​​​​
this.as.userrole.subscribe(ur => {​​​​​​​​
this.userrole = ur
    }​​​​​​​​)
  }​​​​​​​​
 
  canActivate(
    route: ActivatedRouteSnapshot,
    state: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {​​​​​​​​
 
if (this.as.isLoggedIn()) {​​​​​​​​
if (route.data.role && route.data.role.indexOf(this.userrole) === -1) {​​​​​​​​
this.router.navigate(['/home'])
returnfalse
      }​​​​​​​​
returntrue
    }​​​​​​​​ else {​​​​​​​​
this.router.navigate(['/login'])
returnfalse
    }​​​​​​​​
  }​​​​​​​​
 
}​​​​​​​​





